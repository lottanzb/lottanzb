<xsl:transform version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:glade="http://glade.gnome.org/glade-2.0.dtd"
		xmlns:regexp="http://exslt.org/regular-expressions"
		xmlns:str="http://exslt.org/strings"
		xmlns:sam="http://liddicott.com/sam"
		xmlns:func="http://exslt.org/functions"
		xmlns:valax="http://www.liddicott.com/valax"
		extension-element-prefixes="regexp str func sam valax"
		exclude-result-prefixes="regexp str func sam valax">
	<xsl:output method="xml" indent="no" omit-xml-declaration="yes" standalone="no" />
		<xsl:param name="class" />
		<xsl:param name="class-prefix" />
		<xsl:param name="namespace" />
		<xsl:param name="class-name" />
		<xsl:param name="ui-file-name" />
		<xsl:param name="idchars">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_</xsl:param>
		<xsl:param name="eol" select="'&#xA;'" />

		<func:function name="valax:identifier-char">
			<xsl:param name="char" />
			<func:result select="translate($char,$idchars,'')=''" />
		</func:function>

		<func:function name="valax:glade-to-vala-identifier">
			<xsl:param name="text" />
			<xsl:choose>
				<xsl:when test="starts-with($text,'Gtk')">
					<func:result select="concat('Gtk.',valax:vala-identifier(substring-after($text,'Gtk')))" />
				</xsl:when>
				<xsl:otherwise>
					<func:result select="valax:vala-identifier($text)" />
				</xsl:otherwise>
			</xsl:choose>
		</func:function>

		<func:function name="valax:C-quote">
			<xsl:param name="text" />
			<func:result select="str:replace($text,str:tokenize('\,&quot;',','),str:tokenize('\\,\&quot;',','))" />
		</func:function>

		<func:function name="valax:vala-identifier">
			<xsl:param name="id" />
			<xsl:variable name="prefix">
				<xsl:if test="substring($id,1,1) &gt;= '0' and substring($id,1,1) &lt;= '9'">
					<xsl:text>_</xsl:text>
				</xsl:if>
			</xsl:variable>
			<func:result select="concat($prefix,valax:_vala-identifier(normalize-space($id)))" />
		</func:function>

	<func:function name="valax:_vala-identifier">
		<xsl:param name="id" />
		<xsl:param name="previous" />
		<xsl:choose>
			<xsl:when test="$id=''">
				<func:result select="''" />
			</xsl:when>
			<xsl:when test="not(valax:identifier-char(substring($id,1,1)))">
				<xsl:choose>
					<xsl:when test="$previous='_'">
						<func:result select="valax:_vala-identifier(substring($id,2),'_')" />
					</xsl:when>
					<xsl:otherwise>
						<func:result select="concat('_',valax:_vala-identifier(substring($id,2),'_'))" />
					</xsl:otherwise>
				</xsl:choose>
			</xsl:when>
			<xsl:otherwise>
				<func:result select="concat(substring($id,1,1),valax:_vala-identifier(substring($id,2),''))" />
			</xsl:otherwise>
		</xsl:choose>
	</func:function>

	<xsl:template match="/">
		<xsl:variable name="class" select="concat($class-prefix,valax:vala-identifier(//object/@id))" />
		<xsl:variable name="class-count-name" select="concat($class,'_WIDGET_COUNT')" />
		<xsl:variable name="widget-count" select="count(//object[@id])" />

		<xsl:if test="not($widget-count &gt; 0)">
			<xsl:message terminate="yes">Error: Could not find any gtk objects.</xsl:message>
		</xsl:if>

		<xsl:text>/* Auto-generated by gen-vala-gtk-widget-bindings.xslt */

public abstract class </xsl:text>
		<xsl:value-of select="$namespace" />
		<xsl:text>.</xsl:text>
		<xsl:value-of select="$class-name" />
		<xsl:text> : Object </xsl:text>
		<xsl:text disable-output-escaping="yes">{</xsl:text>
		<xsl:text>

	protected class WindowWidgets : Object {

</xsl:text>
		<xsl:for-each select="//object[@id]">
			<xsl:text>		public </xsl:text>
			<xsl:value-of select="valax:glade-to-vala-identifier(@class)" />
			<xsl:text> </xsl:text>
			<xsl:value-of select="valax:vala-identifier(@id)" />
			<xsl:text> { get; set; }
</xsl:text>
		</xsl:for-each>
		<xsl:text>
	}
</xsl:text>

		<xsl:text disable-output-escaping="yes">
	protected Gtk.Builder builder;
	protected WindowWidgets widgets;

	construct {
		builder = new Gtk.Builder ();
		try {
			builder.add_from_resource ("/org/lottanzb/gui/" + ui_file_name);
		} catch (Error e) {
			error ("could not load UI file: %s", e.message);
			exit (-1);
		}
		widgets = new WindowWidgets ();
		SList&lt;unowned Object&gt; objects = builder.get_objects ();
		foreach (Object object in objects) {
			if (object is Gtk.Buildable) {
				widgets.set ((object as Gtk.Buildable).get_name (), object);
			}
		}
		builder.connect_signals (this);
	}
	
	private static const string ui_file_name = "</xsl:text>
		<xsl:value-of select="$ui-file-name" />
		<xsl:text>";

}</xsl:text>
	</xsl:template>

	<xsl:template match="node()|@*">
		<xsl:copy><xsl:apply-templates select="node()|@*" /></xsl:copy>
	</xsl:template>

	<xsl:template name="widget-info">
		<xsl:param name="id" select="@id" />
		<xsl:param name="class" select="@class" />
		<xsl:param name="index" select="position() - 1" />
		<xsl:text>	{</xsl:text>
		<xsl:value-of select="$index" />
		<xsl:text disable-output-escaping="yes">, &quot;</xsl:text>
		<xsl:value-of select="$class" />
		<xsl:text disable-output-escaping="yes">&quot;, &quot;</xsl:text>
		<xsl:value-of select="$id" />
		<xsl:text disable-output-escaping="yes">&quot;},&#xA;</xsl:text>
	</xsl:template>

</xsl:transform>

