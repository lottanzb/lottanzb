#! /usr/bin/env python
# encoding: utf-8

import os.path

from waflib import Options, Errors
from waflib.Task import Task, update_outputs
from waflib.TaskGen import taskgen_method, feature

def build(bld):
    ui_to_vala_mapping = {
        'about_dialog.ui': 'gui/AbstractAboutDialog.vala',
        'add_file_dialog.ui': 'gui/AbstractAddFileDialog.vala',
        'add_url_dialog.ui': 'gui/AbstractAddURLDialog.vala',
        'main_window.ui': 'gui/main/AbstractMainWindow.vala',
        'info_bar.ui': 'gui/main/AbstractInfoBar.vala',
        'download_list.ui': 'gui/main/AbstractDownloadList.vala',
        'download_properties_dialog.ui': 'gui/AbstractDownloadPropertiesDialog.vala',
        'prefs_window.ui': 'gui/prefs/AbstractPreferencesWindow.vala',
        'prefs_tab_general.ui': 'gui/prefs/AbstractGeneralPreferencesTab.vala',
        'server_editor_pane.ui': 'gui/servers/AbstractServerEditorPane.vala',
        'servers_dialog.ui': 'gui/servers/AbstractServersDialog.vala'
    }

    ui_dir_node = bld.path.find_dir('../data/gui')
    for ui_file_name, vala_file_path in ui_to_vala_mapping.items():
        ui_file_node = ui_dir_node.find_or_declare(ui_file_name)
        vala_file_node = bld.path.find_or_declare(vala_file_path)
        task = gen_vala_gtk_widget_bindings(env=bld.env)
        task.set_inputs(ui_file_node)
        task.set_outputs(vala_file_node)
        bld.add_to_group(task)
    source = bld.path.ant_glob(incl='**/*.vala')
    source.append(bld.path.find_or_declare('../data/lottanzb.gresource.c'))
    lib = bld.shlib(
        target='lottanzb',
        features='c cshlib glib2',
        name='liblottanzb',
        header_path='${INCLUDEDIR}/lottanzb',
        gir='LottaNZB-1.0',
        source=source,
        vapi_dirs='../vapi',
        cflags=['-g'] + ['-include' + bld.path.find_or_declare(header_file).abspath() \
                for header_file in ['../config.h', '../data/lottanzb.gresource.h']],
        packages='glib-2.0 gio-2.0 gtk+-3.0 gmodule-2.0 json-glib-1.0 ' + \
            'libsoup-2.4 gee-1.0 launchpad-integration-3.0 unique-3.0 ' + \
            'lottanzb-config lottanzb-resource lottanzb-test-resource',
        uselib='GLIB GIO GTK+ GMODULE LIBSOUP JSON GEE LP UNIQUE',
        vala_defines=['DEBUG'])
    lib.add_settings_schemas([
        '../data/apps.lottanzb.gschema.xml',
        '../data/apps.lottanzb.backend.sabnzbdplus.gschema.xml'])
    lib.add_resource_bundles(['../data/lottanzb.gresource.xml'])

@update_outputs
class gen_vala_gtk_widget_bindings(Task):
    XSLT_FILE_NAME = 'util/gen-vala-gtk-widget-bindings.xslt'
    ext_in=['.ui']
    ext_out=['.vala']
    
    def run(self):
        bld=self.inputs[0].__class__.ctx
        ui_file_node = self.inputs[0]
        vala_file_node = self.outputs[0]
        xslt_file_node = bld.path.make_node(self.XSLT_FILE_NAME)
        class_name = os.path.splitext(vala_file_node.name)[0]
        return self.exec_command('xsltproc -nodtdattr ' + \
            '--stringparam \'ui-file-name\' \'%s\' ' % ui_file_node.name + \
            '--stringparam \'namespace\' \'Lottanzb\' ' + \
            '--stringparam \'class-name\' \'%s\' ' % class_name + \
            '%s %s ' % (xslt_file_node.abspath(), ui_file_node.abspath()) + \
            '> %s' % vala_file_node.abspath())

def r_change_ext(self, ext):
    """
    Change the extension from the *last* dot in the filename. The gsettings schemas
    often have names of the form org.gsettings.test.gschema.xml
    """
    
    name = self.name
    k = name.rfind('.')
    if k >= 0:
        name = name[:k] + ext
    else:
        name = name + ext
    return self.parent.find_or_declare([name])

@taskgen_method
def add_resource_bundles(self, filename_list):
    """Add resource bundle description files to *resource_bundle_files*."""
    if not hasattr(self, 'resource_bundle_files'):
        self.resource_bundle_files = []

    if not isinstance(filename_list, list):
        filename_list = [filename_list]

    self.resource_bundle_files.extend(filename_list)

@feature('glib2')
def process_resource_bundles(self):
    resource_bundle_files = getattr(self, 'resource_bundle_files', [])
    if resource_bundle_files and not self.env['GLIB_COMPILE_RESOURCES']:
        raise Errors.WafError ('Unable to process GResource bundles - ' + \
            'glib-compile-resources was not found during configure')
    
    # process resource_bundle_files
    for bundle_file in resource_bundle_files:
        bundle_task = self.create_task ('compile_resource_bundle')
        bundle_node = self.path.find_resource(bundle_file)
        if not bundle_node:
            raise Errors.WafError('Cannot find the resource bundle file \'%s\'' % bundle_node.abspath())
        
        input_nodes = [bundle_node]
        output_nodes = [r_change_ext (bundle_node, '.c'), r_change_ext (bundle_node, '.h')]
        bundle_list_node = r_change_ext(bundle_node, '.list')
       
        source_node = bundle_node.parent
        get = self.env.get_flat
        self.bld.exec_command('%s --generate-dependencies --sourcedir=%s %s > %s' %
                (get('GLIB_COMPILE_RESOURCES'), source_node.abspath(),
                bundle_node.abspath(), bundle_list_node.abspath()))
        
        for resource_file in bundle_list_node.read().splitlines():
            relative_resource_file = resource_file[len(source_node.abspath ()):]
            resource_node = source_node.find_resource(relative_resource_file)
            input_nodes.append(resource_node)

        bundle_task.set_inputs (input_nodes)
        bundle_task.set_outputs (output_nodes)

class compile_resource_bundle(Task):
    color = 'PINK'
    ext_in = ['.gresource.xml']
    ext_out = ['.c', '.h']
    
    def run(self):
        input_node = self.inputs[0]
        bld = input_node.__class__.ctx
        get = self.env.get_flat
        source_node = input_node.parent
        for output_node in self.outputs:
            output_node.delete()
            output_file = output_node.abspath()
            input_file = input_node.abspath()
            self.exec_command('%s --generate --sourcedir=%s --target=%s %s' %
                (get('GLIB_COMPILE_RESOURCES'), source_node.abspath(),
                output_file, input_file))
